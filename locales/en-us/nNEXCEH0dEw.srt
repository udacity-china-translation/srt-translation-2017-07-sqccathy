1
00:00:00,000 --> 00:00:03,000
So the answer that I think is best is choice four.

2
00:00:03,000 --> 00:00:05,000
Choice two is pretty good.

3
00:00:05,000 --> 00:00:07,000
But I think choice four is a little bit better.

4
00:00:07,000 --> 00:00:10,000
Choice one and choice three would be really difficult.

5
00:00:10,000 --> 00:00:15,000
So let's look at how these look to see why choice four is the best choice.

6
00:00:15,000 --> 00:00:20,000
So I need to shrink the choices to have a little more room for drawing.

7
00:00:20,000 --> 00:00:22,000
So here's what option one would look like.

8
00:00:22,000 --> 00:00:25,000
We have a single list

9
00:00:25,000 --> 00:00:28,000
and the elements of the list are keywords.

10
00:00:28,000 --> 00:00:34,000
Each keyword is a string and the keyword is followed by the URLs where that keyword appears.

11
00:00:34,000 --> 00:00:38,000
So for option one, we have a list, and it's a single list containing strings.

12
00:00:38,000 --> 00:00:41,000
Each string is either a keyword or a URL.

13
00:00:41,000 --> 00:00:45,000
And we have the keyword followed by the URLs where that keyword appears.

14
00:00:45,000 --> 00:00:47,000
This seems nice and simple.

15
00:00:47,000 --> 00:00:49,000
There's only one list.

16
00:00:49,000 --> 00:00:51,000
There are two real big problems with it.

17
00:00:51,000 --> 00:00:54,000
The first problem is it's hard to tell the keywords apart from the URLs.

18
00:00:54,000 --> 00:00:58,000
Maybe in this case we would say "well, anything that starts with HTTP is a URL" --

19
00:00:58,000 --> 00:01:01,000
that's a well-formed web link--

20
00:01:01,000 --> 00:01:04,000
and anything that doesn't is a keyword.

21
00:01:04,000 --> 00:01:06,000
But we could have keywords that start with HTTP as well.

22
00:01:06,000 --> 00:01:09,000
and then we couldn't tell which was which.

23
00:01:09,000 --> 00:01:11,000
The other really big problem with this representation is

24
00:01:11,000 --> 00:01:14,000
it's very hard to loop over the keywords.

25
00:01:14,000 --> 00:01:18,000
To find the next keyword, if we start from keyword one,

26
00:01:18,000 --> 00:01:20,000
we don't know which position to look at.

27
00:01:20,000 --> 00:01:23,000
There are different numbers of links that each keyword might have.

28
00:01:23,000 --> 00:01:24,000
And we'd have to search through every element

29
00:01:24,000 --> 00:01:28,000
to try to decide whether the next thing is a URL or the next keyword.

30
00:01:28,000 --> 00:01:31,000
So this is not going to work very well.

31
00:01:31,000 --> 00:01:34,000
So option one is definitely a bad idea.

32
00:01:34,000 --> 00:01:36,000
So next let's look at option three,

33
00:01:36,000 --> 00:01:39,000
which was the other one that I said really would be very difficult.

34
00:01:39,000 --> 00:01:42,000
So with option three we have a list

35
00:01:42,000 --> 00:01:45,000
where each element of the list is itself a list.

36
00:01:45,000 --> 00:01:48,000
And the element lists are lists where the first element in the list is a URL.

37
00:01:48,000 --> 00:01:51,000
The second element in the list is a list of keywords.

38
00:01:51,000 --> 00:01:55,000
So that would be a list of the keywords that appear at that URL.

39
00:01:55,000 --> 00:01:59,000
So this has more structure than the first choice.

40
00:01:59,000 --> 00:02:01,000
We can tell apart where the URLs are--

41
00:02:01,000 --> 00:02:04,000
all the URLs are the first elements of these lists--

42
00:02:04,000 --> 00:02:08,000
and where the keywords are, which are all contained in the second element of the contained list.

43
00:02:08,000 --> 00:02:12,000
The problem with this approach is it's not going to make it easy

44
00:02:12,000 --> 00:02:15,000
to look up the pages where a keyword appears.

45
00:02:15,000 --> 00:02:18,000
This almost like having to scan all the pages over again.

46
00:02:18,000 --> 00:02:21,000
To look for a particular keyword, we've got to look at each entry,

47
00:02:21,000 --> 00:02:24,000
look in the second part of that entry,

48
00:02:24,000 --> 00:02:25,000
scan it to see if that keyword appears.

49
00:02:25,000 --> 00:02:28,000
If it does, well then we want this URL in our result.

50
00:02:28,000 --> 00:02:32,000
If it doesn't, then that URL is not in the result.

51
00:02:32,000 --> 00:02:35,000
But to find particular keywords, we've got to look through each entry

52
00:02:35,000 --> 00:02:38,000
and look through all of the keywords in that entry.

53
00:02:38,000 --> 00:02:41,000
So this option is not going to work very well.

54
00:02:41,000 --> 00:02:45,000
Our goal in making the index was to be able to make look-ups fast

55
00:02:45,000 --> 00:02:48,000
so we don't have to look through all the content of the pages,

56
00:02:48,000 --> 00:02:51,000
and this representation doesn't solve that problem.

57
00:02:51,000 --> 00:02:53,000
So we have two choices left,

58
00:02:53,000 --> 00:02:56,000
and I said both of these choices could work okay.

59
00:02:56,000 --> 00:02:59,000
But I think the fourth option is the best one.

60
00:02:59,000 --> 00:03:01,000
So let's look at why.

61
00:03:01,000 --> 00:03:03,000
So this is option B.

62
00:03:03,000 --> 00:03:06,000
We have a list where each element of the list is a list.

63
00:03:06,000 --> 00:03:09,000
And the element lists are themselves lists

64
00:03:09,000 --> 00:03:14,000
which contain the keyword followed by URLs where that keyword appears.

65
00:03:14,000 --> 00:03:18,000
This has a big advantage over the first two options.

66
00:03:18,000 --> 00:03:21,000
It means it's easier to tell the keywords from the URLs.

67
00:03:21,000 --> 00:03:24,000
The keyword is always the first element of the list.

68
00:03:24,000 --> 00:03:29,000
And unlike the previous option, it's also easy to go through the keywords.

69
00:03:29,000 --> 00:03:32,000
For each list contained, we just need to look at the first element

70
00:03:32,000 --> 00:03:34,000
to see if that's the keyword we're looking for.

71
00:03:34,000 --> 00:03:36,000
If not, we go onto the next one.

72
00:03:36,000 --> 00:03:39,000
We don't need to look through all the content in all the web pages.

73
00:03:39,000 --> 00:03:43,000
We just need to look at the first element in these lists to find the keyword we're looking for.

74
00:03:43,000 --> 00:03:45,000
So that's okay.

75
00:03:45,000 --> 00:03:48,000
The reason that I think option D is better,

76
00:03:48,000 --> 00:03:51,000
is that it makes a better separation between the keywords and the URLs.

77
00:03:51,000 --> 00:03:54,000
So the difference between this and option D

78
00:03:54,000 --> 00:03:57,000
is in option D instead of the inner lists being flat lists

79
00:03:57,000 --> 00:04:00,000
that are the keyword followed by the URLs,

80
00:04:00,000 --> 00:04:03,000
the inner list has just two elements.

81
00:04:03,000 --> 00:04:08,000
It has the keyword followed by a list of URLs.

82
00:04:08,000 --> 00:04:12,000
So that will be another list, and now we have a list of URLs.

83
00:04:12,000 --> 00:04:14,000
So this is option D.

84
00:04:14,000 --> 00:04:17,000
Each element of the main list is a list.

85
00:04:17,000 --> 00:04:19,000
And it's a list that just contains two elements.

86
00:04:19,000 --> 00:04:22,000
It contains the keyword--here the keyword "udacity"--

87
00:04:22,000 --> 00:04:26,000
followed by a list containing all the URLs where that keyword appears.

88
00:04:26,000 --> 00:04:29,000
The reason I like this better than the second option

89
00:04:29,000 --> 00:04:34,000
is that it really makes a clear separation between the keyword and the list of URLs.

90
00:04:34,000 --> 00:04:38,000
It means if we decide we want to keep track of something else

91
00:04:38,000 --> 00:04:42,000
--say we want to keep track of the number of times someone searches for each keyword--

92
00:04:42,000 --> 00:04:44,000
we could easily do that.

93
00:04:44,000 --> 00:04:49,000
We could have an extra element here that keeps track of the number of times someone searches for something.

94
00:04:49,000 --> 00:04:52,000
With option B, it wouldn't be that clear how to do that.

95
00:04:52,000 --> 00:04:58,000
Maybe we could add an extra value in here--we could add a number in here.

96
00:04:58,000 --> 00:05:00,000
We would need to change a lot of code that we already wrote.

97
00:05:00,000 --> 00:05:03,000
Instead of looking for URLs starting from position one,

98
00:05:03,000 --> 00:05:06,000
we'd have to start from position two now.

99
00:05:06,000 --> 00:05:09,000
Maybe we should put the number at the end to avoid that problem.

100
00:05:09,000 --> 00:05:13,000
Well then we have the problem of we've got to find where the number is.

101
00:05:13,000 --> 00:05:15,000
There are easy ways to find the last element of a list.

102
00:05:15,000 --> 00:05:18,000
But it's going to make things much more complicated.

103
00:05:18,000 --> 00:05:20,000
And if we start adding more and more things,

104
00:05:20,000 --> 00:05:23,000
we're going to have a hard time keeping track of everything.

105
00:05:23,000 --> 00:05:24,000
Option D gives us a lot more structure.

106
00:05:24,000 --> 00:05:28,000
By keeping all the URLs in the list, we can treat that as a list and do things with it

107
00:05:28,000 --> 00:05:31,000
much more easily than if it's combined with a keyword.

108
00:05:31,000 --> 00:05:34,000
And we can also do things like add extra elements

109
00:05:34,000 --> 00:05:37,000
if we want to keep track of the number of times someone searches for that keyword

110
00:05:37,000 --> 00:05:41,000
or any other information we think of later that would be useful to add to our structure.

111
00:05:41,000 --> 00:05:44,000
So that's why I think option D is the best option.

112
00:05:44,000 --> 00:05:49,000
And deciding on data structures is one of the most important things we do when we build software.

113
00:05:49,000 --> 00:05:51,000
If you pick the right data structure,

114
00:05:51,000 --> 00:05:55,000
oftentimes the rest of the code is fairly easy to write.

115
00:05:55,000 --> 00:05:57,000
If you start with the wrong data structure--

116
00:05:57,000 --> 00:06:01,000
say we started with the structure that was choice A or choice C,

117
00:06:01,000 --> 00:06:03,000
well then it's going to be very very difficult,

118
00:06:03,000 --> 00:06:06,000
sometimes it's going to be impossible, to write the code in a way that performs well.

119
00:06:06,000 --> 00:06:10,000
So thinking about data structures is one of the most important things we do in computer science.

120
00:06:10,000 --> 00:06:12,000
We'll see that some more in this course.

121
00:06:12,000 --> 00:06:16,000
We'll also have following courses that really focus on this question

122
00:06:16,000 --> 00:06:19,000
of how to design and use data structures well.
